available::available("wildlifestrikes")
usethis::use_data_raw("USmap")
## code to prepare `USmap` dataset goes here
library(ggplot2)
USstates <- bind_cols(state.name, state.abb)%>%
rename(region =...1, abb = ...2)%>%
mutate(region = tolower(region))%>%
filter(!region%in% c("alaska", "hawaii")) #exclude hawaii and alaska for better comparison
library(dplyr)
## code to prepare `USmap` dataset goes here
library(dplyr)
library(ggplot2)
USstates <- bind_cols(state.name, state.abb)%>%
rename(region =...1, abb = ...2)%>%
mutate(region = tolower(region))%>%
filter(!region%in% c("alaska", "hawaii")) #exclude hawaii and alaska for better comparison
states_map <- map_data("state") %>%
as_tibble()%>%
select(!c("order", "subregion"))
USmap  <- left_join(USstates, states_map, by = "region")
usethis::use_data(USmap, overwrite = TRUE)
usethis::use_data_raw("wildlife_strikes")
# code to prepare `wildlife_strikes` dataset goes here
library(readr)
library(dplyr)
wildlife_strikes <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-07-23/wildlife_impacts.csv")
wildlife_strikes<- wildlife_strikes %>%
filter(airport != "UNKNOWN")%>%  # subset data to exclude observations where airport is unknown
na.omit()%>%  # subset data to exclude missing observations
mutate(height_category = ifelse(height <500, "Below 500", "Above 500"))%>%
rename(abb = state)%>%
rename_all(.funs = function(.x){
.x %>% tolower()
})
usethis::use_data(wildlife_strikes, overwrite = TRUE)
usethis::use_mit_license()
usethis::use_r("calculate_corr")
â€¢	usethis::use_testthat()
usethis::use_testthat()
usethis::use_test("calculate_corr")
devtools::document()
library(wildlifestrikes)
usethis::use_package("rlang")
usethis::use_package("dplyr")
calculate_corr(var = height)
?calculate_corr
library(wildlifestrikes)
devtools::document()
usethis::use_r("cases_airline")
usethis::use_r("count_frequency")
usethis::use_r("damages_airline")
usethis::use_r("hist")
usethis::use_package("scales")
usethis::use_package("ggplot2")
usethis::use_r("cases_state")
devtools::document()
library(wildlifestrikes)
usethis::use_r("run-app")
usethis::use_r("theme_plot")
usethis::use_r("ui_inputs")
usethis::use_r("USmap")
usethis::use_r("wildlife_strikes")
library(wildlifestrikes)
library(wildlifestrikes)
library(shiny); runApp('inst/app/shinyapp.R')
usethis::use_test("cases_airline")
usethis::use_test("count_frequency")
usethis::use_test("test-damages")
usethis::use_test("USmap")
usethis::use_r("shiny")
usethis::use_package("shiny")
library(wildlifestrikes)
library(wildlifestrikes)
library(wildlifestrikes)
devtools::load_all(".")
devtools::check()
usethis::use_package("broom")
devtools::check()
library(wildlifestrikes)
usethis::use_readme_rmd()
o	usethis::use_vignette(wildlifestrikes_aircrafts_USA)
usethis::use_vignette(wildlifestrikes_aircrafts_USA)
usethis::use_vignette("wildlifestrikes_aircrafts_USA")
library(wildlifestrikes)
usethis::use_pipe()
library(wildlifestrikes)
View(wildlife_strikes)
library(wildlifestrikes)
df <- data.frame(Arguments = "`var`",
Description = "the name of variable or the the name of the column in the dataset")
knitr::kable(df)
count_frequency(sky)
count_frequency(sky)
library(wildlifestrikes)
?count_frequency
?count_frequency
library(wildlifestrikes)
?count_frequency
View(wildlife_strikes)
count_frequency(phase_of_flt)
library(wildlifestrikes)
count_frequency_plot(sky)
df <- data.frame(Arguments = "`input_state`",
Description = "Name of the states in the dataset")
knitr::kable(df)
help("cases_statemap")
df <- data.frame(Arguments = c("`input_operator`", "`input_year`"),
Description = c("Name of the airlines in the dataset", "Year in the dataset, ranging from 1990 to 2018"))
knitr::kable(df)
cases_airline("AMERICAN AIRLINES", 2018)
damages_airline("UNITED AIRLINES", 2011)
damages_airline("AMERICAN AIRLINES", 2011)
damages_airline("AMERICAN AIRLINES", 2011)
cases_statemap(c("arizona", "california", "florida", "colorado", "texas"))
cases_state(c("arizona", "california", "florida", "colorado", "texas"))
cases_statemap(c("arizona", "california", "florida", "colorado", "texas"))
library(wildlifestrikes)
devtools::check()
library(wildlifestrikes)
cases_statemap(c("arizona", "california", "florida", "colorado", "texas"))
